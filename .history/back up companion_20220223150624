export default (experienceIdExtractor, experimentGroupeExtractor);

// experienceIdAndGroupExtractor(Username) = {
//   experienceIdAndGroupExtractor: {
//     id: experienceIdExtractor(Username),
//     group: experimentGroupeExtractor(Username),
//   },
// };
const experienceIdExtractor = (Username) => {
  let fields = Username.split('@');
  let part1 = fields[1];
  let ExperimentID = part1.split('.').shift();
  return ExperimentID;
};

const experimentGroupeExtractor = (Username) => {
  let fields = Username.split('.');
  let part1 = fields[1];
  let ExperimentGroup = part1.split('.').shift();
  return ExperimentGroup;
};
//HRWtest4@HRWFeb22.EG.eu
//HRWtest5@HRWFeb22.CG.eu
// console.log(experimentGroupeExtractor('HRWtest4@HRWFeb22.EG.eu'));
// console.log(experimentGroupeExtractor('HRWtest5@HRWFeb22.CG.eu'));
// console.log(experienceIdAndGroupExtractor().id);



//// companion

import React from 'react';
import ChatBot, { Loading } from 'react-simple-chatbot';
import { ThemeProvider } from 'styled-components';
/***
 ChatBot is export default
 Loading is simple export  
 ***/
//import FetchFromWitAI from "./FetchFromWitAI";
import serverSideAddresses from '../../utils/ServerSideAddress.js';
import companionContext from '../../context.js';
import Emoji from './ImagesAndICONS/logo512.png';

import GuideRecButton from './ImagesAndICONS/GuideRecButton.png';
import GuideRecButton2 from './ImagesAndICONS/GuideRecButton2.png';
import GuideRecButton3 from './ImagesAndICONS/GuideRecButton3.png';

import Steps from './CompanionLanguages/Steps/DuSteps.js';
import RIVimage from './ImagesAndICONS/RIVimage.png';

import Fact from './ImagesAndICONS/Fact.jpg';
import Fake from './ImagesAndICONS/Fake.jpg';
import Controversial from './ImagesAndICONS/Controversial.jpg';
import AnalysisTab from './ImagesAndICONS/Analysis.png';
import goldenBadge from './ImagesAndICONS/goldenBadge.png';

import { stepExtractor } from './stepExtractor';
import getExperienceCountAPICaller from './getExperienceCountAPICaller';
import experienceIdExtractor from './experienceIdAndGroupExtractor';
import experimentGroupeExtractor from './experienceIdAndGroupExtractor';
import Textbox1 from './textbox.js';
//import Steps from "./Steps/ItSteps.js";
//import Steps from "./Steps/SpSteps.js";
import Highlighter from './textHighliter/textHighlighter';
const Companion = () => {
  getExperienceCountAPICaller();
  const consumer = React.useContext(companionContext);
  var experienceCount = Number(localStorage.getItem('experienceCount'));
  const [oldConversation, setOldConversation] = React.useState(null);
  const [chatbotMountStatus, setChatbotMountStatus] = React.useState(false);
  // const [experienceCount, setExperienceCount] = React.useState(() => {
  //   return experienceCount;
  // });

  const sendExperienceCount = async () => {
    const userToken = localStorage.getItem('companionUserToken');
    const experienceId = experienceIdExtractor(userToken);
    console.log('experienceIdExtractor natijash ', experienceId);
    await sendExperienceCountAPI(userToken, experienceId);
    console.log('sendExperienceCountAPI activated count ++');
    getExperienceCountAPICaller();
  };
  const sendExperienceCountAPI = async (userToken, experienceId) => {
    // console.log("step counter");
    // console.log(userToken + experienceId);
    try {
      await fetch(`${serverSideAddresses}/experienceCounter/setcount`, {
        method: 'POST',
        headers: {
          Accept: 'application/json',
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userToken: userToken,
          experienceId: experienceId,
        }),
      });
    } catch (err) {
      console.log(err);
    }
  };
  const saveChatHistory = (chatHistory) => {
    const chatInfo = {
      imageUrl: `${consumer.receivedImageInfo.image_meta_information.image_url}`,
      companionUserToken: localStorage.getItem('companionUserToken'),
      chatHistory: chatHistory,
    };
    fetch(`${serverSideAddresses}/checkchat`, {
      method: 'POST',
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        imageUrl: chatInfo.imageUrl,
        companionUserToken: chatInfo.companionUserToken,
        stepID: chatHistory.id,
      }),
    })
      .then((response) => response.json())
      .then((data) => {
        let shouldInsert = data ? false : true;
        if (shouldInsert) {
          fetch(`${serverSideAddresses}/conversation`, {
            method: 'POST',
            body: JSON.stringify(chatInfo),
            headers: {
              Accept: 'application/json',
              'Content-Type': 'application/json',
            },
          })
            .then((msg) => {
              console.log('successfully chat sent to backend' + msg);
            })
            .catch((err) => {
              'Could not add chat info to backend + '(err);
            });
        }
      })
      .catch((err) => console.log(err));
  };
  const saveImageVoteApi = (params) => {
    // this is for xAPI
    return new Promise((resolve, reject) => {
      let userId = localStorage.getItem('companionUserToken');
      let experienceId = experienceIdExtractor(userId);
      fetch(`${serverSideAddresses}/image/reaction`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          user_id: userId,
        },
        body: JSON.stringify({
          image_url: params.image_url,
          experience_id: experienceId,
          vote: params.vote,
          stepID: params.stepID,
          demographicsVote: params.demographicsVote,
        }),
      })
        .then((response) => response.json)
        .then((res) => {
          if (res.success === true) resolve(res);
          else reject(new Error('unable to save'));
        })
        .catch((err) => reject(err));
    });
  };
  const saveImageVote = async (params) => {
    try {
      const resp = await saveImageVoteApi(params);
      console.log('response of saving vote is', resp);
    } catch (error) {
      console.log('unable to save vote');
    }
  };
  const triggerInfo = (info, nextStep, vote, stepID, demographicsVote) => {
    const currentChat = stepExtractor(info.steps, nextStep);
    saveChatHistory(currentChat);
    saveImageVote({
      image_url: consumer.receivedImageInfo.image_meta_information.image_url,
      vote: vote,
      stepID: stepID,
      demographicsVote: demographicsVote,
    });
    return nextStep;
  };
  const getOldConversation = async () => {
    try {
      await fetch(`${serverSideAddresses}/conversation/getdata`, {
        method: 'POST',
        headers: {
          Accept: 'application/json',
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          imageUrl: `${consumer.receivedImageInfo.image_meta_information.image_url}`,
          companionUserToken: localStorage.getItem('companionUserToken'),
        }),
      })
        .then((response) => {
          return response.json();
        })
        .then((res) => {
          reformatOldConversationFunction(res);
        });
    } catch (err) {
      console.log('get conversation API has problem');
    }
  };
  const reformatOldConversationFunction = (res) => {
    getExperienceCountAPICaller();
    //userId = localStorage.getItem('companionUserToken'),
    let userId = 'b';
    if (res.length > 0) {
      let reformatOldConversation = {
        id: res[0].chatHistory[0].id,
        message: res[0].chatHistory[0].message,
        trigger: res[0].chatHistory[0].trigger,
      };
      setOldConversation(reformatOldConversation);
    } else {
      let experimentGroupe = 'CG';
      if (experimentGroupe === 'CG') {
        setOldConversation({
          id: 'CG',
          message: `this is a`,
          trigger: (info) => {
            saveChatHistory(stepExtractor(info.steps, 'ShowThumbnail'));
            return 'ShowThumbnail';
          },
        });
      } else if (userId === 'EG') {
        setOldConversation({
          id: 'EG',
          message: `EG`,
          trigger: (info) => {
            saveChatHistory(stepExtractor(info.steps, 'checkUsrStatus'));
            return 'checkUsrStatus';
          },
        });
      }
    }
    setChatbotMountStatus(true);
  };

  let image_url_Trigger =
    consumer.receivedImageInfo.image_meta_information.image_url;
  React.useEffect(() => {
    // component did mount / will unmount
    setChatbotMountStatus(false);
    getOldConversation();
  }, [image_url_Trigger]);

  /**
   *     ================== Start STEPS ==================
   */
  const conversationSteps = [
    oldConversation,
    // =====================  ShowThumbnail
    {
      delay: 3000,
      id: 'ShowThumbnail',
      component: (
        <img
          src={consumer.receivedImageInfo.image_meta_information.image_url}
          style={{
            width: '50%',
            height: 'auto',
            border: '6px solid #fff',
            margin: '5px',
          }}
          alt={'target'}
        />
      ),
      trigger: (info) => {
        getExperienceCountAPICaller();
        console.log('ShowThumbnail ============== info');
        console.log(experienceCount);
        // local storage gives string
        //saveChatHistory(stepExtractor(info.steps, 'AskToCheckComments'));
        return 'AskToCheckComments';
      },
    },
    // =====================  AskToCheckComments
    {
      delay: 3000,
      id: 'AskToCheckComments',
      message: Steps.AskToCheckComments,
      trigger: (info) => {
        console.log('ShowThumbnail ============== info');
        //saveChatHistory(stepExtractor(info.steps, 'okButton'));
        return 'okButton';
      },
    },
    // check the user status ! first image or the second one !
    {
      id: 'checkUsrStatus',
      message: 'ee',
      trigger: (info) => {
        if (
          consumer.receivedImageInfo.image_meta_information.image_url ===
          'https://pfrias.couragecompanion.eu/storage/m/_v2/213604778138275840/4f8b684e5-e9314a/vlyvkRQwb3ew/u8hVvH5l5IFvha9MQyXCzPOYLo2SXG3bqIpv6vBg.png'
        ) {
          // local storage gives string
          console.log('yes that picture');
          return 'okButton';
        } else {
          console.log('thats not the case ! ');
        }
      },
    },
    // Highlighter
    {
      id: 'Highlighter',
      component: <Highlighter />,
      waitAction: true,
      asMessage: true,
    },

    // =====================  okButton
    {
      id: 'okButton',
      options: [
        {
          value: 'ok',
          label: `ok`,
          trigger: () => {
            // triggerInfo(
            //   info,
            //   'BiteZusammenfassen',
            //   '',
            //   'GenderClassification',
            //   'Male'
            // );
            return 'BiteZusammenfassen';
          },
        },
      ],
    },
    // =====================  BiteZusammenfassen
    {
      id: 'BiteZusammenfassen',
      message: Steps.BiteZusammenfassen,
      trigger: (info) => {
        //saveChatHistory(stepExtractor(info.steps, 'end'));
        return 'UserInput1';
      },
    },
    // ===================== UserInput1 ======= Here differentiate picture one or two !
    {
      id: 'UserInput1',
      user: true,
      validator: (value) => {
        if (value.length < 30) {
          return 'Bitte gib eine etwas längere Antwort ein (mehr als 30 Zeichen).';
        }
        return true;
      },
      trigger: (info) => {
        if (
          consumer.receivedImageInfo.image_meta_information.image_url ===
          'https://pfrias.couragecompanion.eu/storage/m/_v2/213604778138275840/4f8b684e5-e9314a/vlyvkRQwb3ew/u8hVvH5l5IFvha9MQyXCzPOYLo2SXG3bqIpv6vBg.png'
        ) {
          // local storage gives string
          console.log('yes that picture');
          return 'gooz';
        } else {
          console.log(info);
          //saveChatHistory(stepExtractor(info.steps, 'end'));
          return 'askToRightClickOtherImages';
        }
      },
    },
    // ===================== AskToRightClickOtherImages1 =================
    {
      delay: 1000,
      id: 'askToRightClickOtherImages',
      message:
        'Bitte sieh dir jetzt den zweiten Beitrag an. Klick dazu mit der rechten Maustaste auf das Bild und dann auf die Schaltfläche “COURAGE-Companion“.',
      trigger: (info) => {
        return 'end';
      },
    },

    // ======================= ChangedTheirIdeaOptions
    {
      delay: 3000,
      id: 'AskToCheckComments',
      message: Steps.AskToCheckComments,
      trigger: (info) => {
        console.log('ShowThumbnail ============== info');
        //saveChatHistory(stepExtractor(info.steps, 'okButton'));
        return 'okButton';
      },
    },
    // ======================= ChangedTheirIdeaOptions
    {
      id: 'ChangedTheirIdeaOptions',
      options: [
        {
          value: `${Steps.YesChangedTheirIdeaOptions}`,
          label: `${Steps.YesChangedTheirIdeaOptions}`,
          trigger: (info) => {
            // saveChatHistory(
            //   stepExtractor(info.steps, 'ClassificationForSecondTime')
            // );
            return 'ClassificationForSecondTime';
          },
        },
        {
          value: `${Steps.NoChangedTheirIdeaOptions}`,
          label: `${Steps.NoChangedTheirIdeaOptions}`,
          trigger: (info) => {
            saveChatHistory(
              stepExtractor(info.steps, 'FinishWithTheImageConversation')
            );
            return 'FinishWithTheImageConversation';
          },
        },
      ],
    },
    // ClassificationForSecondTime
    {
      id: 'end',
      component: <div> </div>,
      end: true,
    },
  ];

  const theme = {
    //
    background: '#fff',
    fontFamily: 'Helvetica Neue',
    fontSize: '10px',
    headerBgColor: '#FF9001',
    headerFontColor: '#fff',
    headerFontSize: '16px',
    botBubbleColor: '#FF9001',
    botFontColor: '#fff',
    userBubbleColor: '#fff',
    userFontColor: '#4a4a4a',
  };

  return (
    <div style={{ width: '100%', backgroundColor: '#abaab3', height: 500 }}>
      {consumer.receivedImageInfo &&
        consumer.receivedImageInfo.image_meta_information &&
        (oldConversation && chatbotMountStatus ? (
          <ThemeProvider theme={theme}>
            {/* {consumer.receivedImageInfo.image_meta_information.image_url} */}
            <ChatBot
              botAvatar={Emoji}
              steps={conversationSteps}
              headerTitle={'Companion BOT'}
              width={'inline-block'}
            />
          </ThemeProvider>
        ) : (
          <Loading />
        ))}
    </div>
  );
};

export default Companion;
